---
- name: Get disk alignment
  shell: if [[ -e /sys/block/{{ options.data_disks_devices[0] }}/queue/optimal_io_size && -e /sys/block/{{ options.data_disks_devices[0] }}/alignment_offset && -e /sys/block/{{ options.data_disks_devices[0] }}/queue/physical_block_size ]]; then echo $[$(( ($(cat /sys/block/{{ options.data_disks_devices[0] }}/queue/optimal_io_size) + $(cat /sys/block/{{ options.data_disks_devices[0] }}/alignment_offset)) / $(cat /sys/block/{{ options.data_disks_devices[0] }}/queue/physical_block_size) )) | 2048]; else echo 2048; fi
  when: ansible_devices[options.data_disks_devices[0]] is defined
  register: disk_offset

- name: Partition data disks
  shell: parted -s -a optimal /dev/{{ item }} mklabel gpt mkpart primary {{ disk_offset.stdout|default("2048") }}s 100% && sleep 5 && partprobe /dev/{{ item }}; sleep 5
  when: ansible_devices[item] is defined and ansible_devices[item]['partitions'] == {}
  with_items: "{{ options.data_disks_devices }}"

- name: Create the filesystem on data disks
  filesystem: dev="/dev/{{ item }}1" fstype="xfs"
  when: ansible_devices[item] is defined
  with_items: "{{ options.data_disks_devices }}"

- name: Mount data disk under {{ options.cassandra_base_path }}
  mount: state=mounted src="/dev/{{ options.data_disks_devices[0] }}1" name="{{ options.cassandra_base_path }}" fstype=xfs opts=defaults,noatime dump=0 passno=0
  when: ansible_devices[options.data_disks_devices[0]] is defined
